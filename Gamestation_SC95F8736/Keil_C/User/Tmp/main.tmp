//************************************************************
//  Copyright (c)  
//	FileName	  : main.c
//	Function	  : Main Function
//  Instructions  : Contains the MCU initialization function and its H file
//************************************************************
/********************Includes************************************************************************/
#include "SC_Init.h"	// MCU initialization header file, including all firmware library header files
#include "SC_it.h"
#include "..\Drivers\SCDriver_list.h"
#include "HeadFiles\SysFunVarDefine.h"
#include "..\Bank1\Delay.h"
#include "..\Bank1\Lcd_Driver.h"
#include "..\Bank1\GUI.h"
#include "..\Bank3\music.h"
#include "..\Bank2\Key.h"
#include "..\Bank2\data.h"
#include "..\Bank2\run.h"
#include "..\Bank2\run2.h"
#include "..\Bank2\basic_draw.h"
#include "..\Bank2\draw.h"
#include "..\Bank3\esp8266.h"
#include "..\Bank3\data2.h"
#include "stdio.h"
extern struct MUSIC_T music_t;
void draw_menu(void);
void init_Game1(void);
void init_interface_info(void);
void draw_all_through_struct(void);
void run_games(void);
void games_reset(void);
void init_interface2_info(void);
void draw_all2(void);
void init_Game2(void);
void run_games2(void);
void games_reset2(void);
struct Interface2
{
    //生命值
    int8_t my_life;
    int8_t his_life;
    //我的飞机
    int8_t my_plane[2];
    int8_t my_buttles[10][2];
    //对方飞机
    int8_t his_plane[2];
    int8_t his_buttles[10][2];
}volatile interfacetwo;
extern char year;
extern char month;
extern char day;
extern char hour;
extern char minute;
extern char second;
char set_hour;
char set_minute;
char set_second;
char set_numbuf[6];
char clock_mode;
/*
0	时钟模式
1	单人游戏
2	双人游戏
*/
uint8_t Mode=0;
/*
0	不开始
1	开始
*/
uint8_t Start=0;
/**************************************Generated by EasyCodeCube*************************************/

/*************************************.Generated by EasyCodeCube.************************************/
/*****************************************************************************************************
* Function Name: main
* Description  : This function implements main function.
* Arguments    : None
* Return Value : None
******************************************************************************************************/
void main(void)
{
    /*<Generated by EasyCodeCube begin>*/

    
/*<UserCodeStart>*//*<SinOne-Tag><3>*/
    SC_Init(); /*** MCU init***/
	PWM_CmdEX(PWM0_Type,DISABLE);
    SCD_Joystick_Init();
    Lcd_Init();
	Lcd_Clear(BACK_COLOR);
	Gui_DrawFont_GBK24(10,50,RED,BACK_COLOR,"CLOCK INIT"); 
//    ESP8266_Cmd_Init();		//esp8266初始化
//    ESP_get_data();			//世界时间获取
//    Parse_BJ_Time();		//转成年月日，时分秒格式
	Clock_start_draw();
	Lcd_Clear(BACK_COLOR);
    /*<UserCodeEnd>*//*<SinOne-Tag><3>*/
    
/*<UserCodeStart>*//*<SinOne-Tag><4>*/
    /*****MainLoop*****/
    while(1)
    {
        /*<UserCodeStart>*//*<SinOne-Tag><5>*/
        /*****User program*****/
        draw_menu();        		//绘制开始页面
        while(Mode==0&&Start==1)
        {
            Lcd_Clear(BACK_COLOR);
			Gui_DrawFont_GBK24(0,80,GRAY1,BACK_COLOR,"Press start");
			Gui_DrawFont_GBK24(20,100,GRAY1,BACK_COLOR," to set clock");
            while(Start==1)
            {
				clock_mode=0;
                Clock_run();
				if(KEY_Scan(1)==KEY_Start_PRES)
				{
					Lcd_Clear(BACK_COLOR);
					set_hour=hour;
					set_minute=minute;
					set_second=second;
					while(Start==1)
					{
						if(KEY_Scan(1)==KEY_Select_PRES) Start=0;
						if(KEY_Scan(1)==KEY_X_PRES) clock_mode=(clock_mode+2)%3;
						if(KEY_Scan(1)==KEY_B_PRES) clock_mode=(clock_mode+1)%3;
						if((KEY_Scan(1)==KEY_Y_PRES) && (clock_mode==0))	set_hour++;
						if(KEY_Scan(1)==KEY_Y_PRES && clock_mode==1)	set_minute++;
						if(KEY_Scan(1)==KEY_Y_PRES && clock_mode==2)	set_second++;
						if(KEY_Scan(1)==KEY_A_PRES && clock_mode==0) set_hour--;
						if(KEY_Scan(1)==KEY_A_PRES && clock_mode==1) set_minute--;
						if(KEY_Scan(1)==KEY_A_PRES && clock_mode==2) set_second--;
						
						sprintf(set_numbuf,"%d:",(int)set_hour);
						Gui_DrawFont_GBK24(0,20,POINT_COLOR,BACK_COLOR,set_numbuf);
						sprintf(set_numbuf,"%d:",(int)set_minute);
						Gui_DrawFont_GBK24(25,20,POINT_COLOR,BACK_COLOR,set_numbuf);
						sprintf(set_numbuf,"%d",(int)set_second);
						Gui_DrawFont_GBK24(50,20,POINT_COLOR,BACK_COLOR,set_numbuf);
					}
				}
                if(KEY_Scan(1)==KEY_Select_PRES) Start=0; //判断是否返回主菜单
            }
        }
        while(Mode==1&&Start==1)
        {
            PWM_CmdEX(PWM0_Type,ENABLE);
            music_set(1);
            init_Game1();
            run_games();
            games_reset();
        }
        while(Mode==2&&Start==1)
        {
            PWM_CmdEX(PWM0_Type,ENABLE);
            music_set(1);
            init_Game2();
            run_games2();
            games_reset2();
        }
        /*<UserCodeEnd>*//*<SinOne-Tag><5>*/
/*<Begin-Inserted by EasyCodeCube for Condition>*/
        /*<UserCodeEnd>*//*<SinOne-Tag><4>*/
/*<Generated by EasyCodeCube end>*/
    }
}
void draw_menu(void)
{
    PWM_CmdEX(PWM0_Type,DISABLE);
    POINT_COLOR=BLACK;		//设置字体颜色为黑色
    BACK_COLOR=GRAY2;		//设置背景颜色为灰色
    Lcd_Clear(BACK_COLOR);  //将背景颜色置为灰色
    while(!Start)
    {
        if(KEY_Scan(1)==KEY_Start_PRES) Start=1;
        if(KEY_Scan(1)==KEY_Select_PRES) Mode++;
        Mode%=3;
        Gui_DrawFont_GBK24(5,10,RED,BACK_COLOR,"Menu");
        Gui_DrawFont_GBK24(10,45,GRAY1,BACK_COLOR,"Clock       ");
        Gui_DrawFont_GBK24(10,61,GRAY1,BACK_COLOR,"Game for one");
        Gui_DrawFont_GBK24(10,77,GRAY1,BACK_COLOR,"Game for two");
        if(Mode==0)
        {
            Gui_DrawFont_GBK24(10,45,GRAY1,BLUE,"Clock       ");
        }
        else if(Mode==1)
        {
            Gui_DrawFont_GBK24(10,61,GRAY1,BLUE,"Game for one");
        }
        else if(Mode==2)
        {
            Gui_DrawFont_GBK24(10,77,GRAY1,BLUE,"Game for two");
        }
    }
}
void init_Game1(void)
{
    Lcd_Clear(BACK_COLOR);  //将背景颜色置为灰色
    //初始界面初始化
    draw_start_page(); 
    KEYStart_to_skip();
    Lcd_Clear(BACK_COLOR);
    //游玩界面数据初始化
    init_interface_info();
    //游玩上眉初始化
    init_play_interface();
    //游戏主要元素初始化
    draw_all_through_struct();
}
void draw_all_through_struct(void){
    draw_play_all(interface.score,interface.life,interface.my_plane,interface.my_buttles,interface.boss,interface.enemy_planes, interface.enemy_buttles);
}
void init_interface_info(void){
    int i=0;
    //初始化得分
    interface.score = 0;
    interface.score_2 = 0;
    interface.score_3 = 0;
    //初始化生命次数
    interface.life = 3;
    interface.my_plane[0] = 64;	interface.my_plane[1] = 113;
    for(i=0; i<my_buttle_max; i++){
        interface.my_buttles[i][0] = 0;
        interface.my_buttles[i][1] = 0;
    }
    interface.level = 1; //游戏难度
    interface.boss[0] = 0;
    interface.boss[1] = 0;
    interface.boss_life = 1; //boss血量
    interface.pace = 2;
    interface.come_boss = 1;	
    for(i=0; i<enemy_plane_max; i++){
        interface.enemy_planes[i][0] = 0;
        interface.enemy_planes[i][1] = 0;
    }
    for(i=0; i<enemy_buttle_max; i++){
        interface.enemy_buttles[i][0] = 0;
        interface.enemy_buttles[i][1] = 0;
    }
}
void run_games(void)
{	
    while(1)
    {		
        if(interface.life == 0 || interface.boss_life == 0){break;}
        if(interface.score >= 3 && interface.come_boss == 1)
        {
            interface.boss[0] = 50;
            interface.boss[1] = 45;
            interface.come_boss = 0;
            clear_all_enemy_plane(interface.my_plane,interface.enemy_planes, interface.my_buttles, interface.enemy_buttles);
        }
        if(interface.score % 10 == 0)
        {
            interface.level = interface.score/10 + 1;
            if(interface.level > 3)
            {
                interface.level = 3;
            }
        }
        switch_my_act(interface.my_plane,interface.my_buttles);
        update_my_buttles(interface.my_buttles);
        if(interface.boss[0] == 0){
            update_enemy_planes(interface.enemy_planes, interface.level);
            update_enemy_buttles(interface.enemy_buttles, interface.level);
            generate_enemy_planes(interface.level,interface.enemy_planes);
            generate_enemy_buttles(interface.level, interface.enemy_planes, interface.enemy_buttles);
            check_my_plane_to_enemy_plane_collide(&(interface.score),&(interface.life),	interface.my_plane,interface.enemy_planes);
            check_my_plane_to_enemy_buttles_collide(&(interface.life),	interface.enemy_buttles, interface.my_plane);
            check_my_buttles_to_enemy_plane_collide(&(interface.score),	interface.my_buttles, interface.enemy_planes);
        }
        else{
            update_enemy_buttles(interface.enemy_buttles, 1);
            move_boss(interface.boss, &(interface.pace));
            generate_boss_buttles(interface.boss, interface.enemy_buttles);
            check_my_plane_to_enemy_buttles_collide(&(interface.life),	interface.enemy_buttles, interface.my_plane);
            check_my_buttles_to_boss_collide(&(interface.score), &(interface.boss_life),interface.my_buttles, interface.boss);
        }
        draw_all_through_struct();	 
        Delay_ms(20);
    }
}
void games_reset(void)
{
    draw_end(&(interface.score),&(interface.score_2),&(interface.score_3));
    Start=0;
    while(Mode==1&&Start==0)
    {
        if(KEY_Scan(1)==KEY_Start_PRES) Start=1;
        if(KEY_Scan(1)==KEY_Select_PRES) Mode=0;
    }
}
void init_Game2(void)
{
    Lcd_Clear(BACK_COLOR);  //将背景颜色置为灰色
    //初始界面初始化
    Gui_DrawFont_GBK24(30,20,GRAY0,BACK_COLOR,"SPACE WAR");
    Gui_DrawFont_GBK24(72,40,GRAY0,BACK_COLOR,"PVP");
    Gui_DrawFont_GBK24(20,70,GRAY1,BACK_COLOR,"Press Key");
    DisplayButtonUp(98,70,120,86); 
    KEYStart_to_skip();
    Lcd_Clear(BACK_COLOR);
    //游玩界面数据初始化
    init_interface2_info();
    //绘制全部
    draw_all2();
    UART0_SendData8(KEY_Start);
}
void run_games2(void)
{
    while(rev_key!=KEY_Start);
    init_interface2_info();
    while(1)
    {
        if(interfacetwo.my_life==0 | interfacetwo.his_life==0)	break;
        if(check_my_buttles_to_his_plane_collide(interfacetwo.my_buttles,interfacetwo.his_plane)==1)	(interfacetwo.his_life)--;
        if(check_his_buttles_to_my_plane_collide(interfacetwo.his_buttles,interfacetwo.my_plane)==1)	(interfacetwo.my_life)--;
        switch_both_act(interfacetwo.my_plane,interfacetwo.my_buttles,interfacetwo.his_plane,interfacetwo.his_buttles);
        update_both_buttles(interfacetwo.my_buttles,interfacetwo.his_buttles);
        draw_all2();
        Delay_ms(100);
    }
}
void init_interface2_info(void)
{
    int i=0;
    //初始化生命次数
    interfacetwo.my_life = 3;
    interfacetwo.his_life = 3;
    //初始化我机
    interfacetwo.my_plane[0] = 64;	
    interfacetwo.my_plane[1] = 113;
    //初始化敌机
    interfacetwo.his_plane[0] = 64;
    interfacetwo.his_plane[1] = 15;
    //初始化子弹
    for(i=0; i<10; i++){
        interfacetwo.my_buttles[i][0] = 0;
        interfacetwo.my_buttles[i][1] = 0;
        interfacetwo.his_buttles[i][0] = 0;
        interfacetwo.his_buttles[i][1] = 0;
    }
}
void draw_all2(void)
{
    draw_my_plane(interfacetwo.my_plane[0],interfacetwo.my_plane[1]);
    draw_his_plane(interfacetwo.his_plane[0],interfacetwo.his_plane[1]);
    draw_both_buttles(interfacetwo.my_buttles,interfacetwo.his_buttles);
}
void games_reset2(void)
{
    Start=0;
    while(Mode==1&&Start==0)
    {
        if(KEY_Scan(1)==KEY_Start_PRES) Start=1;
        if(KEY_Scan(1)==KEY_Select_PRES) Mode=0;
    }
}
