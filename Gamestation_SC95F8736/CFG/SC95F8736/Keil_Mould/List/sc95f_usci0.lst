C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE SC95F_USCI0
OBJECT MODULE PLACED IN ..\Output\sc95f_usci0.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE ..\FWLib\SC95F_Lib\src\sc95f_usci0.c OMF2 BROWSE INCDIR(..\FWLib\SC95F_Lib\
                    -inc;..\User) DEFINE(SC95F8x2x) DEBUG PRINT(..\List\sc95f_usci0.lst) OBJECT(..\Output\sc95f_usci0.obj)

line level    source

   1          //************************************************************
   2          //  Copyright (c) 深圳市赛元微电子有限公司
   3          //      文件名称        : sc95f_usci0.c
   4          //      作者            : 
   5          //      模块功能        : USCI0固件库函数C文件
   6          //      局部函数列表:
   7          //  最后更正日期: 2020/8/13
   8          //      版本            : V1.0 
   9          //  说明        ：该文件仅适用于SC95Fxx1x、SC95Fxx2x系列芯片  
  10          //*************************************************************
  11          
  12          #include "sc95f_usci0.h"
  13          
  14          /**************************************************
  15          *函数名称：void USCI0_DeInit(void)
  16          *函数功能：USCI0相关寄存器复位至缺省值
  17          *入口参数：void
  18          *出口参数：void
  19          **************************************************/
  20          void USCI0_DeInit(void)
  21          {
  22   1              OTCON &= 0XCF;
  23   1              US0CON0 = 0X00;
  24   1              US0CON1 = 0X00;
  25   1              US0CON2 = 0X00;
  26   1              US0CON3 = 0X00;
  27   1              IE1 &= (~0X01);
  28   1              IP1 &= (~0X01);                 
  29   1      }
  30          
  31          /**************************************************
  32          *函数名称：void USCI0_SPI_Init(USCI0_SPI_FirstBit_TypeDef FirstBit, USCI0_SPI_BaudRatePrescaler_TypeDef Ba
             -udRatePrescaler,USCI0_SPI_Mode_TypeDef Mode,
  33                                                                   USCI0_SPI_ClockPolarity_TypeDef ClockPolarity, USCI0_SPI_ClockPhase_TypeDef ClockPhase,USCI0_SPI_T
             -XE_INT_TypeDef SPI_TXE_INT,USCI0_TransmissionMode_TypeDef TransmissionMode)
  34          *函数功能：SPI初始化配置函数
  35          *入口参数：FirstBit                             优先传送位选择（MSB/LSB）
  36                             BaudRatePrescaler    SPI时钟频率选择
  37                             Mode                                 SPI工作模式选择
  38                             ClockPolarity                SPI时钟极性选择
  39                             ClockPhase                   SPI时钟相位选择
  40                             SPI_TXE_INT                  发送缓存器中断允许选择,该功能在SC95FXX1X芯片上无效
  41                             TransmissionMode     SPI传输模式选择 8/16位
  42          *出口参数：void                                                                                                                                                                                         
  43          **************************************************/
  44          void USCI0_SPI_Init(USCI0_SPI_FirstBit_TypeDef FirstBit, USCI0_SPI_BaudRatePrescaler_TypeDef BaudRatePresc
             -aler, USCI0_SPI_Mode_TypeDef Mode,
  45                                            USCI0_SPI_ClockPolarity_TypeDef ClockPolarity, USCI0_SPI_ClockPhase_TypeDef ClockPhase, USCI0_SPI_TX
             -E_INT_TypeDef SPI_TXE_INT,USCI0_TransmissionMode_TypeDef TransmissionMode)
  46          {
  47   1              
  48   1              OTCON = (OTCON & 0XCF) | 0X10;
  49   1              #if defined (SC95F8x1x) || defined (SC95F7x1x)  
                      SPI_TXE_INT =  USCI0_SPI_TXE_DISINT;//SPI_TXE_INT该功能在SC95FXX1X芯片上无效
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 2   

                      US0CON1 = US0CON1 & (~0X05) | FirstBit | TransmissionMode;
                      #endif
  53   1              #if defined (SC95F8x2x) || defined (SC95F7x2x)  
  54   1              US0CON1 = US0CON1 & (~0X05) | FirstBit | SPI_TXE_INT | TransmissionMode;
  55   1              #endif
  56   1              US0CON0 = US0CON0 & 0X80 | BaudRatePrescaler | Mode | ClockPolarity | ClockPhase;
  57   1      }
  58          
  59          /*****************************************************
  60          *函数名称：void USCI0_SPI_Cmd(FunctionalState NewState)
  61          *函数功能：SPI功能开关函数
  62          *入口参数：FunctionalState NewState     功能启动/关闭选择
  63          *出口参数：void
  64          *****************************************************/
  65          void USCI0_SPI_Cmd(FunctionalState NewState)
  66          {
  67   1              OTCON = (OTCON & 0XCF) | 0X10;
  68   1              if(NewState != DISABLE)
  69   1              {
  70   2                      US0CON0 |= 0X80;
  71   2              }       
  72   1              else
  73   1              {
  74   2                      US0CON0 &= (~0X80);
  75   2              }       
  76   1      }
  77          /*****************************************************
  78          *函数名称：void USCI0_SPI_SendData_8(uint8_t Data)
  79          *函数功能：USCI0 SPI发送数据
  80          *入口参数：Data         发送的数据
  81          *出口参数：void
  82          *****************************************************/
  83          void USCI0_SPI_SendData_8(uint8_t Data)
  84          {
  85   1              US0CON2 = Data;
  86   1      }
  87          
  88          /*****************************************************
  89          *函数名称：uint8_t USCI0_SPI_ReceiveData_8(void)
  90          *函数功能：获得US0CON2中的值
  91          *入口参数：void
  92          *出口参数：uint8_t              
  93          *****************************************************/
  94          uint8_t USCI0_SPI_ReceiveData_8(void)
  95          {
  96   1              return US0CON2;         
  97   1      }
  98          
  99          /*****************************************************
 100          *函数名称：void USCI0_SPI_SendData_16(uint16_t Data)
 101          *函数功能：US0CON2 SPI发送数据
 102          *入口参数：Data         发送的数据
 103          *出口参数：void
 104          *****************************************************/
 105          void USCI0_SPI_SendData_16(uint16_t Data)
 106          {
 107   1              US0CON3 = (uint8_t) (Data >> 8);
 108   1              US0CON2 = (uint8_t) Data;
 109   1      }
 110          
 111          /*****************************************************
 112          *函数名称：uint16_t USCI0_SPI_ReceiveData_16(void)
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 3   

 113          *函数功能：获得US0CON2中的值
 114          *入口参数：void
 115          *出口参数：uint16_t             
 116          *****************************************************/
 117          uint16_t USCI0_SPI_ReceiveData_16(void)
 118          {
 119   1              uint16_t SPI_data;
 120   1              SPI_data = (uint16_t)((US0CON3 << 8) |  US0CON2);
 121   1              return SPI_data;                
 122   1      }
 123          
 124          /**************************************************
 125          *函数名称：void USCI0_TWI_Slave_Init(uint8_t TWI_Address)
 126          *函数功能：USCI0 TWI从机初始化配置函数
 127          *入口参数：TWI_Address  7位从机地址配置                 
 128          *出口参数：void
 129          **************************************************/
 130          void USCI0_TWI_Slave_Init(uint8_t TWI_Address)
 131          {
 132   1              OTCON = OTCON & 0XCF | 0X20;
 133   1              US0CON2 = TWI_Address<<1;               
 134   1      }
 135          
 136          /**************************************************
 137          *函数名称：void USCI0_TWI_MasterCommunicationRate(USCI0_TWI_MasterCommunicationRate_TypeDef TWI_MasterComm
             -unicationRate)
 138          *函数功能：USCI0 TWI主机模式下通讯速率设定
 139          *入口参数：TWI_MasterCommunicationRate TWI主机模式下通讯速率
 140          *出口参数：void
 141          **************************************************/
 142          void USCI0_TWI_MasterCommunicationRate(USCI0_TWI_MasterCommunicationRate_TypeDef TWI_MasterCommunicationRa
             -te)
 143          {
 144   1              OTCON = OTCON & 0XCF | 0X20;
 145   1              US0CON1 |= TWI_MasterCommunicationRate;         
 146   1      }
 147          
 148          /**************************************************
 149          *函数名称：void USCI0_TWI_Start(void)
 150          *函数功能：USCI0 TWI 起始位
 151          *入口参数：void
 152          *出口参数：void
 153          **************************************************/
 154          void USCI0_TWI_Start(void)
 155          {
 156   1              US0CON1 |= 0x20;                
 157   1      }
 158          
 159          /**************************************************
 160          *函数名称：void USCI0_TWI_MasterModeStop(void)
 161          *函数功能：USCI0 TWI主机模式停止位
 162          *入口参数：void
 163          *出口参数：void
 164          **************************************************/
 165          void USCI0_TWI_MasterModeStop(void)
 166          {
 167   1              US0CON1 |= 0x10;                
 168   1      }
 169          
 170          /**************************************************
 171          *函数名称：void USCI0_TWI_SlaveClockExtension(void)
 172          *函数功能：USCI0 TWI从机模式时钟延长功能位
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 4   

 173          *入口参数：void
 174          *出口参数：void
 175          **************************************************/
 176          void USCI0_TWI_SlaveClockExtension(FunctionalState NewState)
 177          {
 178   1              OTCON = OTCON & 0XCF | 0X20;
 179   1              if (NewState != DISABLE)
 180   1              {
 181   2                      US0CON1 |= 0x40;        
 182   2              }
 183   1              else
 184   1              {
 185   2                      US0CON1 &= 0XBF;
 186   2              }               
 187   1      }
 188          
 189          /**************************************************
 190          *函数名称：void USCI0_TWI_AcknowledgeConfig(FunctionalState NewState)
 191          *函数功能：TWI接收应答使能函数
 192          *入口参数：FunctionalState NewState             接收应答使能/失能选择                   
 193          *出口参数：void
 194          **************************************************/
 195          void USCI0_TWI_AcknowledgeConfig(FunctionalState NewState)
 196          {
 197   1              OTCON = OTCON & 0XCF | 0X20;
 198   1              if (NewState != DISABLE)
 199   1              {
 200   2                      US0CON0 |= 0X08;        
 201   2              }
 202   1              else
 203   1              {
 204   2                      US0CON0 &= 0XF7;
 205   2              }
 206   1      }
 207          
 208          /**************************************************
 209          *函数名称：void USCI0_TWI_GeneralCallCmd(FunctionalState NewState)
 210          *函数功能：TWI通用地址响应使能函数
 211          *入口参数：FunctionalState NewState             通用地址响应使能/失能选择                       
 212          *出口参数：void
 213          **************************************************/
 214          void USCI0_TWI_GeneralCallCmd(FunctionalState NewState)
 215          {
 216   1              OTCON = OTCON & 0XCF | 0X20;
 217   1              if (NewState != DISABLE)
 218   1              {
 219   2                      US0CON2 |= 0X01;        
 220   2              }
 221   1              else
 222   1              {
 223   2                      US0CON2 &= 0XFE;
 224   2              }       
 225   1      }
 226          
 227          /*****************************************************
 228          *函数名称：void USCI0_TWI_Cmd(FunctionalState NewState)
 229          *函数功能：TWI功能开关函数
 230          *入口参数：FunctionalState NewState     功能启动/关闭选择
 231          *出口参数：void
 232          *****************************************************/
 233          void USCI0_TWI_Cmd(FunctionalState NewState)
 234          {
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 5   

 235   1              OTCON = OTCON & 0XCF | 0X20;
 236   1              if(NewState != DISABLE)
 237   1              {
 238   2                      US0CON0 |= 0X80;        
 239   2              }
 240   1              else
 241   1              {
 242   2                      US0CON0 &= (~0X80);
 243   2              }
 244   1      }
 245          
 246          /*****************************************************
 247          *函数名称：void USCI0_TWI_SendData(uint8_t Data)
 248          *函数功能：TWI发送数据
 249          *入口参数：Data         发送的数据
 250          *出口参数：void
 251          *****************************************************/
 252          void USCI0_TWI_SendData(uint8_t Data)
 253          {
 254   1              US0CON3 = Data; 
 255   1      }
 256          
 257          /*****************************************************
 258          *函数名称：uint8_t USCI0_TWI_SendData(void)
 259          *函数功能：获得US0CON3中的值
 260          *入口参数：void
 261          *出口参数：uint8_t      
 262          *****************************************************/
 263          uint8_t USCI0_TWI_ReceiveData(void)
 264          {
 265   1              return US0CON3;
 266   1      }
 267          
 268          /**************************************************
 269          *函数名称：void USCI0_UART_Init(uint32_t UARTFsys, uint32_t BaudRate, USCI0_UART_Mode_TypeDef Mode, USCI0_
             -UART_RX_TypeDef RxMode)
 270          *函数功能：UART初始化配置函数
 271          *入口参数：UARTFsys     系统时钟频率
 272                             BaudRate             波特率
 273                             Mode                 UART1工作模式
 274                             RxMode               接收允许选择
 275          *出口参数：void
 276          **************************************************/
 277          void USCI0_UART_Init(uint32_t UARTFsys, uint32_t BaudRate, USCI0_UART_Mode_TypeDef Mode, USCI0_UART_RX_Typ
             -eDef RxMode) 
 278          {
 279   1              OTCON |= 0x30;
 280   1              US0CON0 = US0CON0 & 0X0F | Mode | RxMode;
 281   1              if(Mode == USCI0_UART_Mode_8B)
 282   1              {
 283   2                      if(BaudRate == USCI0_UART_BaudRate_FsysDIV12)
 284   2                      {
 285   3                              US0CON0 &= 0XDF;                
 286   3                      }
 287   2                      else if(BaudRate == USCI0_UART_BaudRate_FsysDIV4)
 288   2                      {
 289   3                              US0CON0 |= 0X20;                
 290   3                      }
 291   2              }
 292   1              else
 293   1              {
 294   2                      US0CON2 = UARTFsys / BaudRate / 256;
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 6   

 295   2                      US0CON1 = UARTFsys / BaudRate % 256;
 296   2              }       
 297   1      }
 298          
 299          /*****************************************************
 300          *函数名称：void USCI0_UART_SendData8(uint8_t Data)
 301          *函数功能：USCI0 UART1发送8位数据
 302          *入口参数：Data         发送的数据
 303          *出口参数：void
 304          *****************************************************/
 305          void USCI0_UART_SendData8(uint8_t Data)
 306          {
 307   1         US0CON3 = Data;
 308   1      }
 309          
 310          /*****************************************************
 311          *函数名称：uint8_t USCI0_UART_ReceiveData8(void)
 312          *函数功能：获得US0CON3中的值
 313          *入口参数：void
 314          *出口参数：uint8_t              
 315          *****************************************************/
 316          uint8_t USCI0_UART_ReceiveData8(void)
 317          {
 318   1              return US0CON3;
 319   1      }
 320          
 321          /*****************************************************
 322          *函数名称：void USCI0_UART_SendData9(uint16_t Data)
 323          *函数功能：UART1发送9位数据
 324          *入口参数：Data         发送的数据
 325          *出口参数：void
 326          *****************************************************/
 327          void USCI0_UART_SendData9(uint16_t Data)
 328          {
 329   1              uint8_t Data_9Bit;
 330   1              Data_9Bit = (Data>>8);
 331   1              if(Data_9Bit)
 332   1              {
 333   2                      US0CON0 |= 0x08;
 334   2              }
 335   1              else
 336   1              {
 337   2                      US0CON0 &= 0xf7;
 338   2              }
 339   1              
 340   1              US0CON3 = (uint8_t)Data;
 341   1      }
 342          
 343          /*****************************************************
 344          *函数名称：uint16_t USCI0_UART_ReceiveData9(void)
 345          *函数功能：获得US0CON3中的值及第九位的值
 346          *入口参数：void
 347          *出口参数：uint16_t             
 348          *****************************************************/
 349          uint16_t USCI0_UART_ReceiveData9(void)
 350          {
 351   1              uint16_t Data9;
 352   1              Data9 =  US0CON3 + ((uint16_t)(US0CON0&0X04)<<6);
 353   1              return Data9;
 354   1      }
 355          
 356          /*****************************************************
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 7   

 357          *函数名称：void USCI0_ITConfig(FunctionalState NewState, PriorityStatus Priority)
 358          *函数功能：USCI0中断初始化
 359          *入口参数：FunctionalState NewState     中断使能/关闭选择
 360                             PriorityStatus Priority      中断优先级选择
 361          *出口参数：void
 362          *****************************************************/
 363          void USCI0_ITConfig(FunctionalState NewState, PriorityStatus Priority)
 364          {
 365   1          if(NewState != DISABLE)
 366   1          {
 367   2             IE1 |= 0x01;
 368   2          }
 369   1          else
 370   1          {
 371   2             IE1 &= 0xFE;
 372   2          }
 373   1      /************************************************************/
 374   1              if(Priority != LOW)
 375   1              {
 376   2                      IP1 |= 0x01;
 377   2              }
 378   1              else
 379   1              {
 380   2                      IP1 &= 0xFE;
 381   2              }
 382   1      }
 383          
 384          /*****************************************************
 385          *函数名称：FlagStatus USCI0_GetFlagStatus(USCI0_Flag_TypeDef USCI0_FLAG)
 386          *函数功能：获得USCI0标志状态
 387          *入口参数：USCI0_FLAG           所需获取的标志位
 388          *出口参数：FlagStatus           USCI0标志状态   
 389          *****************************************************/
 390          FlagStatus USCI0_GetFlagStatus(USCI0_Flag_TypeDef USCI0_FLAG)
 391          {
 392   1              FlagStatus bitstatus = RESET;
 393   1              #if defined (SC95F8x1x) || defined (SC95F7x1x)
                      if((USCI0_FLAG==USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG==USCI0_SPI_FLAG_WCOL))
                      #endif
 396   1              #if defined (SC95F8x2x) || defined (SC95F7x2x)
 397   1              if((USCI0_FLAG==USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG==USCI0_SPI_FLAG_WCOL) || (USCI0_FLAG==USCI0_SPI_FLAG_
             -TXE))
 398   1              #endif
 399   1              {
 400   2                      if((USCI0_FLAG & US0CON1) != (uint8_t)RESET)
 401   2                      {
 402   3                              bitstatus = SET;                        
 403   3                      }
 404   2                      else
 405   2                      {       
 406   3                              bitstatus = RESET;
 407   3                      }
 408   2              }
 409   1              else
 410   1              {
 411   2                      if((USCI0_FLAG & US0CON0) != (uint8_t)RESET)
 412   2                      {
 413   3                              bitstatus = SET;                        
 414   3                      }
 415   2                      else
 416   2                      {       
 417   3                              bitstatus = RESET;
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 8   

 418   3                      }
 419   2              }
 420   1              
 421   1              return bitstatus;
 422   1      }
 423          
 424          /*****************************************************
 425          *函数名称：void USCI0_ClearFlag(USCI0_Flag_TypeDef USCI0_FLAG)
 426          *函数功能：清除USCI0标志状态
 427          *入口参数：USCI0_FLAG           所需清除的标志位
 428          *出口参数：void 
 429          *****************************************************/
 430          void USCI0_ClearFlag(USCI0_Flag_TypeDef USCI0_FLAG)
 431          {
 432   1              #if defined (SC95F8x1x) || defined (SC95F7x1x)
                      if((USCI0_FLAG==USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG==USCI0_SPI_FLAG_WCOL))
                      #endif  
 435   1              #if defined (SC95F8x2x) || defined (SC95F7x2x)
 436   1              if((USCI0_FLAG==USCI0_SPI_FLAG_SPIF) || (USCI0_FLAG==USCI0_SPI_FLAG_WCOL) || (USCI0_FLAG==USCI0_SPI_FLAG_
             -TXE))
 437   1              #endif
 438   1              {
 439   2                      US0CON1 &= (~USCI0_FLAG);
 440   2              }
 441   1              else
 442   1              {
 443   2                      US0CON0 &= (~USCI0_FLAG);
 444   2              }
 445   1      }
 446          
 447          /*****************************************************
 448          *函数名称：void USCI0_TWI_SendAddr(uint8_t Addr,USCI0_TWI_RWType RW)
 449          *函数功能：TWI发送地址，读写类型
 450          *入口参数：Addr         发送的地址 0~127
 451                                                   RW                     读写类型
 452          *出口参数：void
 453          *****************************************************/
 454          void USCI0_TWI_SendAddr(uint8_t Addr,USCI0_TWI_RWType RW)
 455          {
 456   1              US0CON3 = (Addr<<1)|RW; 
 457   1      }
 458          
 459          #if defined (SC95F8x2x) || defined (SC95F7x2x)  
 460          /**************************************************
 461          *函数名称：void USCI0_SC_Init()
 462          *函数功能：智能卡初始化配置函数
 463          *入口参数：ClockEnable  时钟输出使能位
 464                             ErrorSignal  ErrorSignal长度
 465                             TrenMode             发送/接收使能，发送和接收只能二选一
 466                             ConsMode             编码方式选择
 467                             ReSend               数据发送接收校验出错重发使能位
 468                             CheckType    校验类型
 469          *出口参数：void
 470          **************************************************/
 471          void USCI0_SC_Init( FunctionalState ClockEnable,
 472                                                  USCI0_SC_ERS_TypeDef ErrorSignal,
 473                                                  USCI0_SC_TREN_TypeDef TrenMode,
 474                                                  USCI0_SC_CONS_TypeDef ConsMode,
 475                                                  FunctionalState ReSend,
 476                                                  USCI0_SC_Check_TypeDef CheckType
 477                                             ) 
 478          {
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 9   

 479   1              if(ClockEnable!= DISABLE)
 480   1              {
 481   2                      US0CON0|=0x40;
 482   2              }
 483   1              else
 484   1              {
 485   2                      US0CON0&=~0x40;
 486   2              }
 487   1      
 488   1              US0CON0&= ~0x3d;
 489   1              US0CON0|= TrenMode|ConsMode|CheckType|(ErrorSignal<<3);
 490   1      
 491   1              if(ReSend!= DISABLE)
 492   1              {
 493   2                       US0CON0|=0x02;
 494   2              }
 495   1              else
 496   1              {
 497   2                       US0CON0&=~0x02;
 498   2              }
 499   1      
 500   1      }
 501          /**************************************************
 502          *函数名称：void USCI0_SC_EGT(uint8_t EgtCount)
 503          *函数功能：智能卡拓展保护时间设置
 504          *入口参数：EgtCount             拓展保护时间数：EgtCount个ETU
 505          *出口参数：void
 506          **************************************************/
 507          void USCI0_SC_EGT(uint8_t EgtCount)
 508          {
 509   1              US0CON4 = EgtCount;
 510   1      }
 511          
 512          /**************************************************
 513          *函数名称：void USCI0_SC_ETU_SET(USCI0_SC_PresSel_TypeDef SC_PrescalerSelection,uint8_t EtuCk)
 514          *函数功能：ETU设置，一个ETU时间长度设置
 515          *入口参数：SC_PrescalerSelection                SC Clock 时钟来源
 516                             EtuCk                一个ETU为(EtuCk+1)个SC Clock。必须大于0x004
 517          *出口参数：void
 518          **************************************************/
 519          void USCI0_SC_ETU_SET(USCI0_SC_PresSel_TypeDef SC_PrescalerSelection,uint16_t EtuCk)
 520          {
 521   1              US0CON2 = (EtuCk>>8);
 522   1              US0CON1 = (uint8_t)EtuCk;
 523   1              US0CON2 = (SC_PrescalerSelection<<4);
 524   1      }
 525          /*****************************************************
 526          *函数名称：void USCI0_SC_Cmd(FunctionalState NewState)
 527          *函数功能：智能卡功能开关函数
 528          *入口参数：FunctionalState NewState     功能启动/关闭选择
 529          *出口参数：void
 530          *****************************************************/
 531          void USCI0_SC_Cmd(FunctionalState NewState)
 532          {
 533   1              if(NewState == DISABLE)
 534   1              {
 535   2                      US0CON0 &= 0X7F;
 536   2              }
 537   1              else
 538   1              {
 539   2                      US0CON0 |= 0x80;
 540   2              }       
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 10  

 541   1      }
 542          /*****************************************************
 543          *函数名称：FlagStatus USCI0_SC_GetFlagStatus(USCI0_SC_Flag_TypeDef USCI0_SC_FLAG)
 544          *函数功能：获得SC标志状态
 545          *入口参数：USCI0_SC_FLAG        所需获取的标志位
 546          *出口参数：FlagStatus           USCI0_SC标志状态        
 547          *****************************************************/
 548          FlagStatus USCI0_SC_GetFlagStatus(USCI0_SC_Flag_TypeDef USCI0_SC_FLAG)
 549          {
 550   1      //        寄存器切换控制位：
 551   1      //        0 ：US0CON5 (B7H)为读写状态寄存器
 552   1      //        1 ：US0CON5 (B7H)为读写错误信息寄存器   
 553   1                US0CON5 |= (USCI0_SC_FLAG&0X80);
 554   1                return USCI0_SC_FLAG&US0CON5;
 555   1      }
 556          /*****************************************************
 557          *函数名称：void USCI0_UART_SendData(uint8_t Data)
 558          *函数功能：USCI0 SC发送8位数据
 559          *入口参数：Data  发送的数据
 560          *出口参数：void
 561          *****************************************************/
 562          void USCI0_SC_SendData(uint8_t Data)
 563          {
 564   1              US0CON3 = Data;
 565   1      }
 566          /*****************************************************
 567          *函数名称：uint8_t USCI0_SC_ReceiveData(void)
 568          *函数功能：获得接收缓存中的值
 569          *入口参数：void
 570          *出口参数：uint8_t              
 571          *****************************************************/
 572          uint8_t USCI0_SC_ReceiveData(void)
 573          {
 574   1              return US0CON3;
 575   1      }
 576          /*********************************************************************************************************
             -*
 577          *函数名称：uint8_t USCI0_SPI_WriteFIFO(uint16_t *sbuf,uint8_t length)
 578          *函数功能：SPI0写入FIFO
 579          *入口参数：uint16_t *sbuf,uint8_t length(发送buffer，数据长度)
 580          *出口参数：uint8_t(0:非法操作；1:写入FIFO缓存成功)
 581          **********************************************************************************************************
             -/
 582          uint8_t USCI0_SPI_WriteFIFO(uint16_t *sbuf,uint8_t length)
 583          {
 584   1              if(length > 8 || length < 1)  
 585   1              {
 586   2                      return 0;
 587   2              }
 588   1              else
 589   1              {
 590   2                      uint8_t i=0;
 591   2                      US0CON1 &= ~0x01;                       //关闭TBIE
 592   2                      for(i=0;i<length;i++) 
 593   2                      {
 594   3                              US0CON3 = *(sbuf+i)>>8; //写入待发送数据的高字节
 595   3                              US0CON2 = *(sbuf+i);            //写入待发送数据的低字节
 596   3                      }
 597   2                      if(length != 0x01)                      //若非单次写入，需清除TXE
 598   2                      {
 599   3                              US0CON1 &= (~0x08);             //清TXE
 600   3                      }
C51 COMPILER V9.01   SC95F_USCI0                                                           09/07/2020 16:59:34 PAGE 11  

 601   2                      US0CON1 |= 0x01;                        //开启TBIE
 602   2                      return 1;
 603   2              }
 604   1      }
 605          #endif
 606          
 607          /******************* (C) COPYRIGHT 2020 SinOne Microelectronics *****END OF FILE****/
 608          
 609          
 610                                     
 611                         
 612          
 613          
 614          
 615          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    633    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
